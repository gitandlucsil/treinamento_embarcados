
Treinamento_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009e4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000af0  08000af0  00010af0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000b18  08000b18  00010b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000b1c  08000b1c  00010b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08000b20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000022c  2000000c  08000b2c  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000238  08000b2c  00020238  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000692e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000145a  00000000  00000000  00026963  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c69  00000000  00000000  00027dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000328  00000000  00000000  00028a28  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003d8  00000000  00000000  00028d50  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001d35  00000000  00000000  00029128  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001550  00000000  00000000  0002ae5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002c3ad  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000664  00000000  00000000  0002c42c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08000ad8 	.word	0x08000ad8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08000ad8 	.word	0x08000ad8

0800014c <app_run>:
volatile uint8_t idDecodificado = 0;
volatile uint8_t nDadosDecodificados = 0;
volatile uint8_t dadosDecodificados[255];

void app_run(void)
{
 800014c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    while(1){
    	if(run == TRUE){
 8000150:	4d10      	ldr	r5, [pc, #64]	; (8000194 <app_run+0x48>)
    		run = FALSE;
    		uint8_t i = 0;
    		for(i=0;i<NUMERO_DADOS_VETOR;i++){
                exec_decodificador_avirede(serialData[i]);
                if(frame_decodificado() == TRUE){
                	modeloDecodificado = recebe_modelo_frame();
 8000152:	4e11      	ldr	r6, [pc, #68]	; (8000198 <app_run+0x4c>)
    	if(run == TRUE){
 8000154:	782b      	ldrb	r3, [r5, #0]
 8000156:	2b01      	cmp	r3, #1
 8000158:	d1fc      	bne.n	8000154 <app_run+0x8>
    		run = FALSE;
 800015a:	2400      	movs	r4, #0
                exec_decodificador_avirede(serialData[i]);
 800015c:	4f0f      	ldr	r7, [pc, #60]	; (800019c <app_run+0x50>)
                	idDecodificado = recebe_id_frame();
 800015e:	f8df 8048 	ldr.w	r8, [pc, #72]	; 80001a8 <app_run+0x5c>
    		run = FALSE;
 8000162:	702c      	strb	r4, [r5, #0]
                exec_decodificador_avirede(serialData[i]);
 8000164:	5d38      	ldrb	r0, [r7, r4]
 8000166:	f000 f847 	bl	80001f8 <exec_decodificador_avirede>
                if(frame_decodificado() == TRUE){
 800016a:	f000 f83f 	bl	80001ec <frame_decodificado>
 800016e:	2801      	cmp	r0, #1
 8000170:	d10b      	bne.n	800018a <app_run+0x3e>
                	modeloDecodificado = recebe_modelo_frame();
 8000172:	f000 f81b 	bl	80001ac <recebe_modelo_frame>
 8000176:	7030      	strb	r0, [r6, #0]
                	idDecodificado = recebe_id_frame();
 8000178:	f000 f81e 	bl	80001b8 <recebe_id_frame>
 800017c:	f888 0000 	strb.w	r0, [r8]
                	nDadosDecodificados = recebe_dados_frame((uint8_t *)dadosDecodificados);
 8000180:	4807      	ldr	r0, [pc, #28]	; (80001a0 <app_run+0x54>)
 8000182:	f000 f81f 	bl	80001c4 <recebe_dados_frame>
 8000186:	4b07      	ldr	r3, [pc, #28]	; (80001a4 <app_run+0x58>)
 8000188:	7018      	strb	r0, [r3, #0]
 800018a:	3401      	adds	r4, #1
    		for(i=0;i<NUMERO_DADOS_VETOR;i++){
 800018c:	2c08      	cmp	r4, #8
 800018e:	d1e9      	bne.n	8000164 <app_run+0x18>
 8000190:	e7e0      	b.n	8000154 <app_run+0x8>
 8000192:	bf00      	nop
 8000194:	20000000 	.word	0x20000000
 8000198:	20000029 	.word	0x20000029
 800019c:	08000b00 	.word	0x08000b00
 80001a0:	20000033 	.word	0x20000033
 80001a4:	2000002a 	.word	0x2000002a
 80001a8:	20000028 	.word	0x20000028

080001ac <recebe_modelo_frame>:
uint8_t frameDecodificado = 0;

uint8_t recebe_modelo_frame(void)
{
    return modelo;
}
 80001ac:	4b01      	ldr	r3, [pc, #4]	; (80001b4 <recebe_modelo_frame+0x8>)
 80001ae:	7818      	ldrb	r0, [r3, #0]
 80001b0:	4770      	bx	lr
 80001b2:	bf00      	nop
 80001b4:	20000031 	.word	0x20000031

080001b8 <recebe_id_frame>:

uint8_t recebe_id_frame(void)
{
    return id;
}
 80001b8:	4b01      	ldr	r3, [pc, #4]	; (80001c0 <recebe_id_frame+0x8>)
 80001ba:	7818      	ldrb	r0, [r3, #0]
 80001bc:	4770      	bx	lr
 80001be:	bf00      	nop
 80001c0:	20000030 	.word	0x20000030

080001c4 <recebe_dados_frame>:

uint8_t recebe_dados_frame(uint8_t *pDados)
{
	uint8_t i = 0;
	for(i=0;i<nDados;i++){
 80001c4:	2300      	movs	r3, #0
{
 80001c6:	b530      	push	{r4, r5, lr}
	for(i=0;i<nDados;i++){
 80001c8:	4c06      	ldr	r4, [pc, #24]	; (80001e4 <recebe_dados_frame+0x20>)
		pDados[i] = dados[i];
 80001ca:	4d07      	ldr	r5, [pc, #28]	; (80001e8 <recebe_dados_frame+0x24>)
	for(i=0;i<nDados;i++){
 80001cc:	7822      	ldrb	r2, [r4, #0]
 80001ce:	1c59      	adds	r1, r3, #1
 80001d0:	b2db      	uxtb	r3, r3
 80001d2:	4293      	cmp	r3, r2
 80001d4:	d301      	bcc.n	80001da <recebe_dados_frame+0x16>
	}
    return nDados;
}
 80001d6:	4610      	mov	r0, r2
 80001d8:	bd30      	pop	{r4, r5, pc}
		pDados[i] = dados[i];
 80001da:	5cea      	ldrb	r2, [r5, r3]
 80001dc:	54c2      	strb	r2, [r0, r3]
 80001de:	460b      	mov	r3, r1
 80001e0:	e7f4      	b.n	80001cc <recebe_dados_frame+0x8>
 80001e2:	bf00      	nop
 80001e4:	20000032 	.word	0x20000032
 80001e8:	20000132 	.word	0x20000132

080001ec <frame_decodificado>:

uint8_t frame_decodificado(void)
{
    return frameDecodificado;
}
 80001ec:	4b01      	ldr	r3, [pc, #4]	; (80001f4 <frame_decodificado+0x8>)
 80001ee:	7818      	ldrb	r0, [r3, #0]
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	2000002f 	.word	0x2000002f

080001f8 <exec_decodificador_avirede>:

void exec_decodificador_avirede(uint8_t dado)
{
 80001f8:	b570      	push	{r4, r5, r6, lr}
    
    switch(estado){
 80001fa:	4b29      	ldr	r3, [pc, #164]	; (80002a0 <exec_decodificador_avirede+0xa8>)
 80001fc:	781a      	ldrb	r2, [r3, #0]
 80001fe:	2a07      	cmp	r2, #7
 8000200:	d847      	bhi.n	8000292 <exec_decodificador_avirede+0x9a>
 8000202:	e8df f002 	tbb	[pc, r2]
 8000206:	0d04      	.short	0x0d04
 8000208:	291c1511 	.word	0x291c1511
 800020c:	312d      	.short	0x312d
 800020e:	2100      	movs	r1, #0
 8000210:	4a24      	ldr	r2, [pc, #144]	; (80002a4 <exec_decodificador_avirede+0xac>)
        case AGUARDA_INICIO_DE_FRAME:
            if(dado == 0xAA){
 8000212:	28aa      	cmp	r0, #170	; 0xaa
                frameDecodificado = 0;
 8000214:	7011      	strb	r1, [r2, #0]
            if(dado == 0xAA){
 8000216:	d102      	bne.n	800021e <exec_decodificador_avirede+0x26>
                estado = AGUARDA_MODELO;
 8000218:	2201      	movs	r2, #1
                estado = AGUARDA_INICIO_DE_FRAME;
            }
            break;
        
        default:
            estado = AGUARDA_INICIO_DE_FRAME;
 800021a:	701a      	strb	r2, [r3, #0]
 800021c:	bd70      	pop	{r4, r5, r6, pc}
 800021e:	bd70      	pop	{r4, r5, r6, pc}
            modelo = dado;
 8000220:	4a21      	ldr	r2, [pc, #132]	; (80002a8 <exec_decodificador_avirede+0xb0>)
 8000222:	7010      	strb	r0, [r2, #0]
            estado = AGUARDA_ID;
 8000224:	2202      	movs	r2, #2
 8000226:	e7f8      	b.n	800021a <exec_decodificador_avirede+0x22>
            id = dado;
 8000228:	4a20      	ldr	r2, [pc, #128]	; (80002ac <exec_decodificador_avirede+0xb4>)
 800022a:	7010      	strb	r0, [r2, #0]
            estado = AGUARDA_NUMERO_DE_DADOS;
 800022c:	2203      	movs	r2, #3
 800022e:	e7f4      	b.n	800021a <exec_decodificador_avirede+0x22>
            dataCount = 0;
 8000230:	2100      	movs	r1, #0
            nDados = dado;
 8000232:	4a1f      	ldr	r2, [pc, #124]	; (80002b0 <exec_decodificador_avirede+0xb8>)
 8000234:	7010      	strb	r0, [r2, #0]
            dataCount = 0;
 8000236:	4a1f      	ldr	r2, [pc, #124]	; (80002b4 <exec_decodificador_avirede+0xbc>)
 8000238:	7011      	strb	r1, [r2, #0]
            estado = AGUARDA_DADOS;
 800023a:	2204      	movs	r2, #4
 800023c:	e7ed      	b.n	800021a <exec_decodificador_avirede+0x22>
            dados[dataCount] = dado;
 800023e:	491d      	ldr	r1, [pc, #116]	; (80002b4 <exec_decodificador_avirede+0xbc>)
 8000240:	4c1d      	ldr	r4, [pc, #116]	; (80002b8 <exec_decodificador_avirede+0xc0>)
 8000242:	780a      	ldrb	r2, [r1, #0]
 8000244:	54a0      	strb	r0, [r4, r2]
            dataCount += 1;
 8000246:	3201      	adds	r2, #1
 8000248:	b2d2      	uxtb	r2, r2
 800024a:	700a      	strb	r2, [r1, #0]
            if(dataCount >= nDados){
 800024c:	4918      	ldr	r1, [pc, #96]	; (80002b0 <exec_decodificador_avirede+0xb8>)
 800024e:	7809      	ldrb	r1, [r1, #0]
 8000250:	4291      	cmp	r1, r2
 8000252:	d8e3      	bhi.n	800021c <exec_decodificador_avirede+0x24>
                estado = AGUARDA_CHECKSUM_1;
 8000254:	2205      	movs	r2, #5
 8000256:	e7e0      	b.n	800021a <exec_decodificador_avirede+0x22>
            cks1 = dado;
 8000258:	4a18      	ldr	r2, [pc, #96]	; (80002bc <exec_decodificador_avirede+0xc4>)
 800025a:	7010      	strb	r0, [r2, #0]
            estado = AGUARDA_CHECKSUM_2;
 800025c:	2206      	movs	r2, #6
 800025e:	e7dc      	b.n	800021a <exec_decodificador_avirede+0x22>
            cks2 = dado;
 8000260:	4a17      	ldr	r2, [pc, #92]	; (80002c0 <exec_decodificador_avirede+0xc8>)
 8000262:	7010      	strb	r0, [r2, #0]
            estado = AGUARDA_FIM_DE_FRAME;
 8000264:	2207      	movs	r2, #7
 8000266:	e7d8      	b.n	800021a <exec_decodificador_avirede+0x22>
            if(dado == 0x55){
 8000268:	2855      	cmp	r0, #85	; 0x55
 800026a:	d112      	bne.n	8000292 <exec_decodificador_avirede+0x9a>
                checksumRecebido |= cks2;
 800026c:	4914      	ldr	r1, [pc, #80]	; (80002c0 <exec_decodificador_avirede+0xc8>)
                checksumRecebido = cks1;
 800026e:	4a13      	ldr	r2, [pc, #76]	; (80002bc <exec_decodificador_avirede+0xc4>)
                checksumRecebido |= cks2;
 8000270:	7808      	ldrb	r0, [r1, #0]
                for(i=0; i<nDados; i++){
 8000272:	2100      	movs	r1, #0
                checksumRecebido = cks1;
 8000274:	7812      	ldrb	r2, [r2, #0]
                    checksumCalculado += dados[i];
 8000276:	4e10      	ldr	r6, [pc, #64]	; (80002b8 <exec_decodificador_avirede+0xc0>)
                checksumRecebido |= cks2;
 8000278:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
                for(i=0; i<nDados; i++){
 800027c:	4a0c      	ldr	r2, [pc, #48]	; (80002b0 <exec_decodificador_avirede+0xb8>)
 800027e:	7815      	ldrb	r5, [r2, #0]
                uint16_t checksumCalculado = 0;
 8000280:	460a      	mov	r2, r1
                for(i=0; i<nDados; i++){
 8000282:	b2cc      	uxtb	r4, r1
 8000284:	42a5      	cmp	r5, r4
 8000286:	d806      	bhi.n	8000296 <exec_decodificador_avirede+0x9e>
                if(checksumCalculado == checksumRecebido){
 8000288:	4282      	cmp	r2, r0
                    frameDecodificado = 1;
 800028a:	bf02      	ittt	eq
 800028c:	2101      	moveq	r1, #1
 800028e:	4a05      	ldreq	r2, [pc, #20]	; (80002a4 <exec_decodificador_avirede+0xac>)
 8000290:	7011      	strbeq	r1, [r2, #0]
            estado = AGUARDA_INICIO_DE_FRAME;
 8000292:	2200      	movs	r2, #0
 8000294:	e7c1      	b.n	800021a <exec_decodificador_avirede+0x22>
                    checksumCalculado += dados[i];
 8000296:	5d8c      	ldrb	r4, [r1, r6]
 8000298:	3101      	adds	r1, #1
 800029a:	4422      	add	r2, r4
 800029c:	b292      	uxth	r2, r2
 800029e:	e7f0      	b.n	8000282 <exec_decodificador_avirede+0x8a>
 80002a0:	2000002e 	.word	0x2000002e
 80002a4:	2000002f 	.word	0x2000002f
 80002a8:	20000031 	.word	0x20000031
 80002ac:	20000030 	.word	0x20000030
 80002b0:	20000032 	.word	0x20000032
 80002b4:	2000002d 	.word	0x2000002d
 80002b8:	20000132 	.word	0x20000132
 80002bc:	2000002b 	.word	0x2000002b
 80002c0:	2000002c 	.word	0x2000002c

080002c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002c4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80002c6:	4b0e      	ldr	r3, [pc, #56]	; (8000300 <HAL_InitTick+0x3c>)
{
 80002c8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80002ca:	7818      	ldrb	r0, [r3, #0]
 80002cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002d0:	fbb3 f3f0 	udiv	r3, r3, r0
 80002d4:	4a0b      	ldr	r2, [pc, #44]	; (8000304 <HAL_InitTick+0x40>)
 80002d6:	6810      	ldr	r0, [r2, #0]
 80002d8:	fbb0 f0f3 	udiv	r0, r0, r3
 80002dc:	f000 f880 	bl	80003e0 <HAL_SYSTICK_Config>
 80002e0:	4604      	mov	r4, r0
 80002e2:	b958      	cbnz	r0, 80002fc <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002e4:	2d0f      	cmp	r5, #15
 80002e6:	d809      	bhi.n	80002fc <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002e8:	4602      	mov	r2, r0
 80002ea:	4629      	mov	r1, r5
 80002ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80002f0:	f000 f842 	bl	8000378 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002f4:	4b04      	ldr	r3, [pc, #16]	; (8000308 <HAL_InitTick+0x44>)
 80002f6:	4620      	mov	r0, r4
 80002f8:	601d      	str	r5, [r3, #0]
 80002fa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80002fc:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80002fe:	bd38      	pop	{r3, r4, r5, pc}
 8000300:	20000001 	.word	0x20000001
 8000304:	20000008 	.word	0x20000008
 8000308:	20000004 	.word	0x20000004

0800030c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800030c:	4a07      	ldr	r2, [pc, #28]	; (800032c <HAL_Init+0x20>)
{
 800030e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000310:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000312:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000314:	f043 0310 	orr.w	r3, r3, #16
 8000318:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800031a:	f000 f81b 	bl	8000354 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800031e:	2000      	movs	r0, #0
 8000320:	f7ff ffd0 	bl	80002c4 <HAL_InitTick>
  HAL_MspInit();
 8000324:	f000 fb34 	bl	8000990 <HAL_MspInit>
}
 8000328:	2000      	movs	r0, #0
 800032a:	bd08      	pop	{r3, pc}
 800032c:	40022000 	.word	0x40022000

08000330 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000330:	4a03      	ldr	r2, [pc, #12]	; (8000340 <HAL_IncTick+0x10>)
 8000332:	4b04      	ldr	r3, [pc, #16]	; (8000344 <HAL_IncTick+0x14>)
 8000334:	6811      	ldr	r1, [r2, #0]
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	440b      	add	r3, r1
 800033a:	6013      	str	r3, [r2, #0]
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	20000234 	.word	0x20000234
 8000344:	20000001 	.word	0x20000001

08000348 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000348:	4b01      	ldr	r3, [pc, #4]	; (8000350 <HAL_GetTick+0x8>)
 800034a:	6818      	ldr	r0, [r3, #0]
}
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	20000234 	.word	0x20000234

08000354 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000354:	4a07      	ldr	r2, [pc, #28]	; (8000374 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000356:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000358:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800035a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800035e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000362:	041b      	lsls	r3, r3, #16
 8000364:	0c1b      	lsrs	r3, r3, #16
 8000366:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800036a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800036e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000370:	60d3      	str	r3, [r2, #12]
 8000372:	4770      	bx	lr
 8000374:	e000ed00 	.word	0xe000ed00

08000378 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000378:	4b17      	ldr	r3, [pc, #92]	; (80003d8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800037a:	b530      	push	{r4, r5, lr}
 800037c:	68dc      	ldr	r4, [r3, #12]
 800037e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000382:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000386:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000388:	2b04      	cmp	r3, #4
 800038a:	bf28      	it	cs
 800038c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800038e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000390:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000394:	bf98      	it	ls
 8000396:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000398:	fa05 f303 	lsl.w	r3, r5, r3
 800039c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003a0:	bf88      	it	hi
 80003a2:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003a4:	4019      	ands	r1, r3
 80003a6:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003a8:	fa05 f404 	lsl.w	r4, r5, r4
 80003ac:	3c01      	subs	r4, #1
 80003ae:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80003b0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003b2:	ea42 0201 	orr.w	r2, r2, r1
 80003b6:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ba:	bfaf      	iteee	ge
 80003bc:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003c0:	4b06      	ldrlt	r3, [pc, #24]	; (80003dc <HAL_NVIC_SetPriority+0x64>)
 80003c2:	f000 000f 	andlt.w	r0, r0, #15
 80003c6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003c8:	bfa5      	ittet	ge
 80003ca:	b2d2      	uxtbge	r2, r2
 80003cc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003d0:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003d2:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80003d6:	bd30      	pop	{r4, r5, pc}
 80003d8:	e000ed00 	.word	0xe000ed00
 80003dc:	e000ed14 	.word	0xe000ed14

080003e0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003e0:	3801      	subs	r0, #1
 80003e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80003e6:	d20a      	bcs.n	80003fe <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003e8:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003ea:	4b06      	ldr	r3, [pc, #24]	; (8000404 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ec:	4a06      	ldr	r2, [pc, #24]	; (8000408 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003ee:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003f0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003f4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003f6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003f8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80003fe:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	e000e010 	.word	0xe000e010
 8000408:	e000ed00 	.word	0xe000ed00

0800040c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800040c:	6803      	ldr	r3, [r0, #0]
{
 800040e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000412:	07db      	lsls	r3, r3, #31
{
 8000414:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000416:	d410      	bmi.n	800043a <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000418:	682b      	ldr	r3, [r5, #0]
 800041a:	079f      	lsls	r7, r3, #30
 800041c:	d45e      	bmi.n	80004dc <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800041e:	682b      	ldr	r3, [r5, #0]
 8000420:	0719      	lsls	r1, r3, #28
 8000422:	f100 8095 	bmi.w	8000550 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000426:	682b      	ldr	r3, [r5, #0]
 8000428:	075a      	lsls	r2, r3, #29
 800042a:	f100 80bf 	bmi.w	80005ac <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800042e:	69ea      	ldr	r2, [r5, #28]
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 812d 	bne.w	8000690 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000436:	2000      	movs	r0, #0
 8000438:	e014      	b.n	8000464 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800043a:	4c90      	ldr	r4, [pc, #576]	; (800067c <HAL_RCC_OscConfig+0x270>)
 800043c:	6863      	ldr	r3, [r4, #4]
 800043e:	f003 030c 	and.w	r3, r3, #12
 8000442:	2b04      	cmp	r3, #4
 8000444:	d007      	beq.n	8000456 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000446:	6863      	ldr	r3, [r4, #4]
 8000448:	f003 030c 	and.w	r3, r3, #12
 800044c:	2b08      	cmp	r3, #8
 800044e:	d10c      	bne.n	800046a <HAL_RCC_OscConfig+0x5e>
 8000450:	6863      	ldr	r3, [r4, #4]
 8000452:	03de      	lsls	r6, r3, #15
 8000454:	d509      	bpl.n	800046a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000456:	6823      	ldr	r3, [r4, #0]
 8000458:	039c      	lsls	r4, r3, #14
 800045a:	d5dd      	bpl.n	8000418 <HAL_RCC_OscConfig+0xc>
 800045c:	686b      	ldr	r3, [r5, #4]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d1da      	bne.n	8000418 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000462:	2001      	movs	r0, #1
}
 8000464:	b002      	add	sp, #8
 8000466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800046a:	686b      	ldr	r3, [r5, #4]
 800046c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000470:	d110      	bne.n	8000494 <HAL_RCC_OscConfig+0x88>
 8000472:	6823      	ldr	r3, [r4, #0]
 8000474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000478:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800047a:	f7ff ff65 	bl	8000348 <HAL_GetTick>
 800047e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000480:	6823      	ldr	r3, [r4, #0]
 8000482:	0398      	lsls	r0, r3, #14
 8000484:	d4c8      	bmi.n	8000418 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000486:	f7ff ff5f 	bl	8000348 <HAL_GetTick>
 800048a:	1b80      	subs	r0, r0, r6
 800048c:	2864      	cmp	r0, #100	; 0x64
 800048e:	d9f7      	bls.n	8000480 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000490:	2003      	movs	r0, #3
 8000492:	e7e7      	b.n	8000464 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000494:	b99b      	cbnz	r3, 80004be <HAL_RCC_OscConfig+0xb2>
 8000496:	6823      	ldr	r3, [r4, #0]
 8000498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800049c:	6023      	str	r3, [r4, #0]
 800049e:	6823      	ldr	r3, [r4, #0]
 80004a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004a4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80004a6:	f7ff ff4f 	bl	8000348 <HAL_GetTick>
 80004aa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80004ac:	6823      	ldr	r3, [r4, #0]
 80004ae:	0399      	lsls	r1, r3, #14
 80004b0:	d5b2      	bpl.n	8000418 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80004b2:	f7ff ff49 	bl	8000348 <HAL_GetTick>
 80004b6:	1b80      	subs	r0, r0, r6
 80004b8:	2864      	cmp	r0, #100	; 0x64
 80004ba:	d9f7      	bls.n	80004ac <HAL_RCC_OscConfig+0xa0>
 80004bc:	e7e8      	b.n	8000490 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80004c2:	6823      	ldr	r3, [r4, #0]
 80004c4:	d103      	bne.n	80004ce <HAL_RCC_OscConfig+0xc2>
 80004c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004ca:	6023      	str	r3, [r4, #0]
 80004cc:	e7d1      	b.n	8000472 <HAL_RCC_OscConfig+0x66>
 80004ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004d2:	6023      	str	r3, [r4, #0]
 80004d4:	6823      	ldr	r3, [r4, #0]
 80004d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004da:	e7cd      	b.n	8000478 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80004dc:	4c67      	ldr	r4, [pc, #412]	; (800067c <HAL_RCC_OscConfig+0x270>)
 80004de:	6863      	ldr	r3, [r4, #4]
 80004e0:	f013 0f0c 	tst.w	r3, #12
 80004e4:	d007      	beq.n	80004f6 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80004e6:	6863      	ldr	r3, [r4, #4]
 80004e8:	f003 030c 	and.w	r3, r3, #12
 80004ec:	2b08      	cmp	r3, #8
 80004ee:	d110      	bne.n	8000512 <HAL_RCC_OscConfig+0x106>
 80004f0:	6863      	ldr	r3, [r4, #4]
 80004f2:	03da      	lsls	r2, r3, #15
 80004f4:	d40d      	bmi.n	8000512 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80004f6:	6823      	ldr	r3, [r4, #0]
 80004f8:	079b      	lsls	r3, r3, #30
 80004fa:	d502      	bpl.n	8000502 <HAL_RCC_OscConfig+0xf6>
 80004fc:	692b      	ldr	r3, [r5, #16]
 80004fe:	2b01      	cmp	r3, #1
 8000500:	d1af      	bne.n	8000462 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000502:	6823      	ldr	r3, [r4, #0]
 8000504:	696a      	ldr	r2, [r5, #20]
 8000506:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800050a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800050e:	6023      	str	r3, [r4, #0]
 8000510:	e785      	b.n	800041e <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000512:	692a      	ldr	r2, [r5, #16]
 8000514:	4b5a      	ldr	r3, [pc, #360]	; (8000680 <HAL_RCC_OscConfig+0x274>)
 8000516:	b16a      	cbz	r2, 8000534 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000518:	2201      	movs	r2, #1
 800051a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800051c:	f7ff ff14 	bl	8000348 <HAL_GetTick>
 8000520:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000522:	6823      	ldr	r3, [r4, #0]
 8000524:	079f      	lsls	r7, r3, #30
 8000526:	d4ec      	bmi.n	8000502 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000528:	f7ff ff0e 	bl	8000348 <HAL_GetTick>
 800052c:	1b80      	subs	r0, r0, r6
 800052e:	2802      	cmp	r0, #2
 8000530:	d9f7      	bls.n	8000522 <HAL_RCC_OscConfig+0x116>
 8000532:	e7ad      	b.n	8000490 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000534:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000536:	f7ff ff07 	bl	8000348 <HAL_GetTick>
 800053a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800053c:	6823      	ldr	r3, [r4, #0]
 800053e:	0798      	lsls	r0, r3, #30
 8000540:	f57f af6d 	bpl.w	800041e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000544:	f7ff ff00 	bl	8000348 <HAL_GetTick>
 8000548:	1b80      	subs	r0, r0, r6
 800054a:	2802      	cmp	r0, #2
 800054c:	d9f6      	bls.n	800053c <HAL_RCC_OscConfig+0x130>
 800054e:	e79f      	b.n	8000490 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000550:	69aa      	ldr	r2, [r5, #24]
 8000552:	4c4a      	ldr	r4, [pc, #296]	; (800067c <HAL_RCC_OscConfig+0x270>)
 8000554:	4b4b      	ldr	r3, [pc, #300]	; (8000684 <HAL_RCC_OscConfig+0x278>)
 8000556:	b1da      	cbz	r2, 8000590 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000558:	2201      	movs	r2, #1
 800055a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800055c:	f7ff fef4 	bl	8000348 <HAL_GetTick>
 8000560:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000562:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000564:	079b      	lsls	r3, r3, #30
 8000566:	d50d      	bpl.n	8000584 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000568:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800056c:	4b46      	ldr	r3, [pc, #280]	; (8000688 <HAL_RCC_OscConfig+0x27c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	fbb3 f3f2 	udiv	r3, r3, r2
 8000574:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000576:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000578:	9b01      	ldr	r3, [sp, #4]
 800057a:	1e5a      	subs	r2, r3, #1
 800057c:	9201      	str	r2, [sp, #4]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d1f9      	bne.n	8000576 <HAL_RCC_OscConfig+0x16a>
 8000582:	e750      	b.n	8000426 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000584:	f7ff fee0 	bl	8000348 <HAL_GetTick>
 8000588:	1b80      	subs	r0, r0, r6
 800058a:	2802      	cmp	r0, #2
 800058c:	d9e9      	bls.n	8000562 <HAL_RCC_OscConfig+0x156>
 800058e:	e77f      	b.n	8000490 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000590:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000592:	f7ff fed9 	bl	8000348 <HAL_GetTick>
 8000596:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000598:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800059a:	079f      	lsls	r7, r3, #30
 800059c:	f57f af43 	bpl.w	8000426 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80005a0:	f7ff fed2 	bl	8000348 <HAL_GetTick>
 80005a4:	1b80      	subs	r0, r0, r6
 80005a6:	2802      	cmp	r0, #2
 80005a8:	d9f6      	bls.n	8000598 <HAL_RCC_OscConfig+0x18c>
 80005aa:	e771      	b.n	8000490 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80005ac:	4c33      	ldr	r4, [pc, #204]	; (800067c <HAL_RCC_OscConfig+0x270>)
 80005ae:	69e3      	ldr	r3, [r4, #28]
 80005b0:	00d8      	lsls	r0, r3, #3
 80005b2:	d424      	bmi.n	80005fe <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 80005b4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80005b6:	69e3      	ldr	r3, [r4, #28]
 80005b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005bc:	61e3      	str	r3, [r4, #28]
 80005be:	69e3      	ldr	r3, [r4, #28]
 80005c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80005c8:	4e30      	ldr	r6, [pc, #192]	; (800068c <HAL_RCC_OscConfig+0x280>)
 80005ca:	6833      	ldr	r3, [r6, #0]
 80005cc:	05d9      	lsls	r1, r3, #23
 80005ce:	d518      	bpl.n	8000602 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80005d0:	68eb      	ldr	r3, [r5, #12]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d126      	bne.n	8000624 <HAL_RCC_OscConfig+0x218>
 80005d6:	6a23      	ldr	r3, [r4, #32]
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80005de:	f7ff feb3 	bl	8000348 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80005e2:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80005e6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80005e8:	6a23      	ldr	r3, [r4, #32]
 80005ea:	079b      	lsls	r3, r3, #30
 80005ec:	d53f      	bpl.n	800066e <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80005ee:	2f00      	cmp	r7, #0
 80005f0:	f43f af1d 	beq.w	800042e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80005f4:	69e3      	ldr	r3, [r4, #28]
 80005f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80005fa:	61e3      	str	r3, [r4, #28]
 80005fc:	e717      	b.n	800042e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80005fe:	2700      	movs	r7, #0
 8000600:	e7e2      	b.n	80005c8 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000602:	6833      	ldr	r3, [r6, #0]
 8000604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000608:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800060a:	f7ff fe9d 	bl	8000348 <HAL_GetTick>
 800060e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000610:	6833      	ldr	r3, [r6, #0]
 8000612:	05da      	lsls	r2, r3, #23
 8000614:	d4dc      	bmi.n	80005d0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000616:	f7ff fe97 	bl	8000348 <HAL_GetTick>
 800061a:	eba0 0008 	sub.w	r0, r0, r8
 800061e:	2864      	cmp	r0, #100	; 0x64
 8000620:	d9f6      	bls.n	8000610 <HAL_RCC_OscConfig+0x204>
 8000622:	e735      	b.n	8000490 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000624:	b9ab      	cbnz	r3, 8000652 <HAL_RCC_OscConfig+0x246>
 8000626:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000628:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800062c:	f023 0301 	bic.w	r3, r3, #1
 8000630:	6223      	str	r3, [r4, #32]
 8000632:	6a23      	ldr	r3, [r4, #32]
 8000634:	f023 0304 	bic.w	r3, r3, #4
 8000638:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800063a:	f7ff fe85 	bl	8000348 <HAL_GetTick>
 800063e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000640:	6a23      	ldr	r3, [r4, #32]
 8000642:	0798      	lsls	r0, r3, #30
 8000644:	d5d3      	bpl.n	80005ee <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000646:	f7ff fe7f 	bl	8000348 <HAL_GetTick>
 800064a:	1b80      	subs	r0, r0, r6
 800064c:	4540      	cmp	r0, r8
 800064e:	d9f7      	bls.n	8000640 <HAL_RCC_OscConfig+0x234>
 8000650:	e71e      	b.n	8000490 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000652:	2b05      	cmp	r3, #5
 8000654:	6a23      	ldr	r3, [r4, #32]
 8000656:	d103      	bne.n	8000660 <HAL_RCC_OscConfig+0x254>
 8000658:	f043 0304 	orr.w	r3, r3, #4
 800065c:	6223      	str	r3, [r4, #32]
 800065e:	e7ba      	b.n	80005d6 <HAL_RCC_OscConfig+0x1ca>
 8000660:	f023 0301 	bic.w	r3, r3, #1
 8000664:	6223      	str	r3, [r4, #32]
 8000666:	6a23      	ldr	r3, [r4, #32]
 8000668:	f023 0304 	bic.w	r3, r3, #4
 800066c:	e7b6      	b.n	80005dc <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800066e:	f7ff fe6b 	bl	8000348 <HAL_GetTick>
 8000672:	eba0 0008 	sub.w	r0, r0, r8
 8000676:	42b0      	cmp	r0, r6
 8000678:	d9b6      	bls.n	80005e8 <HAL_RCC_OscConfig+0x1dc>
 800067a:	e709      	b.n	8000490 <HAL_RCC_OscConfig+0x84>
 800067c:	40021000 	.word	0x40021000
 8000680:	42420000 	.word	0x42420000
 8000684:	42420480 	.word	0x42420480
 8000688:	20000008 	.word	0x20000008
 800068c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000690:	4c22      	ldr	r4, [pc, #136]	; (800071c <HAL_RCC_OscConfig+0x310>)
 8000692:	6863      	ldr	r3, [r4, #4]
 8000694:	f003 030c 	and.w	r3, r3, #12
 8000698:	2b08      	cmp	r3, #8
 800069a:	f43f aee2 	beq.w	8000462 <HAL_RCC_OscConfig+0x56>
 800069e:	2300      	movs	r3, #0
 80006a0:	4e1f      	ldr	r6, [pc, #124]	; (8000720 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80006a2:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80006a4:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80006a6:	d12b      	bne.n	8000700 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80006a8:	f7ff fe4e 	bl	8000348 <HAL_GetTick>
 80006ac:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80006ae:	6823      	ldr	r3, [r4, #0]
 80006b0:	0199      	lsls	r1, r3, #6
 80006b2:	d41f      	bmi.n	80006f4 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80006b4:	6a2b      	ldr	r3, [r5, #32]
 80006b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006ba:	d105      	bne.n	80006c8 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80006bc:	6862      	ldr	r2, [r4, #4]
 80006be:	68a9      	ldr	r1, [r5, #8]
 80006c0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80006c4:	430a      	orrs	r2, r1
 80006c6:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80006c8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80006ca:	6862      	ldr	r2, [r4, #4]
 80006cc:	430b      	orrs	r3, r1
 80006ce:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80006d2:	4313      	orrs	r3, r2
 80006d4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80006d6:	2301      	movs	r3, #1
 80006d8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80006da:	f7ff fe35 	bl	8000348 <HAL_GetTick>
 80006de:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80006e0:	6823      	ldr	r3, [r4, #0]
 80006e2:	019a      	lsls	r2, r3, #6
 80006e4:	f53f aea7 	bmi.w	8000436 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80006e8:	f7ff fe2e 	bl	8000348 <HAL_GetTick>
 80006ec:	1b40      	subs	r0, r0, r5
 80006ee:	2802      	cmp	r0, #2
 80006f0:	d9f6      	bls.n	80006e0 <HAL_RCC_OscConfig+0x2d4>
 80006f2:	e6cd      	b.n	8000490 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80006f4:	f7ff fe28 	bl	8000348 <HAL_GetTick>
 80006f8:	1bc0      	subs	r0, r0, r7
 80006fa:	2802      	cmp	r0, #2
 80006fc:	d9d7      	bls.n	80006ae <HAL_RCC_OscConfig+0x2a2>
 80006fe:	e6c7      	b.n	8000490 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000700:	f7ff fe22 	bl	8000348 <HAL_GetTick>
 8000704:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000706:	6823      	ldr	r3, [r4, #0]
 8000708:	019b      	lsls	r3, r3, #6
 800070a:	f57f ae94 	bpl.w	8000436 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800070e:	f7ff fe1b 	bl	8000348 <HAL_GetTick>
 8000712:	1b40      	subs	r0, r0, r5
 8000714:	2802      	cmp	r0, #2
 8000716:	d9f6      	bls.n	8000706 <HAL_RCC_OscConfig+0x2fa>
 8000718:	e6ba      	b.n	8000490 <HAL_RCC_OscConfig+0x84>
 800071a:	bf00      	nop
 800071c:	40021000 	.word	0x40021000
 8000720:	42420060 	.word	0x42420060

08000724 <HAL_RCC_GetSysClockFreq>:
{
 8000724:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000728:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800072a:	ac02      	add	r4, sp, #8
 800072c:	f103 0510 	add.w	r5, r3, #16
 8000730:	4622      	mov	r2, r4
 8000732:	6818      	ldr	r0, [r3, #0]
 8000734:	6859      	ldr	r1, [r3, #4]
 8000736:	3308      	adds	r3, #8
 8000738:	c203      	stmia	r2!, {r0, r1}
 800073a:	42ab      	cmp	r3, r5
 800073c:	4614      	mov	r4, r2
 800073e:	d1f7      	bne.n	8000730 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000740:	2301      	movs	r3, #1
 8000742:	f88d 3004 	strb.w	r3, [sp, #4]
 8000746:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000748:	4911      	ldr	r1, [pc, #68]	; (8000790 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800074a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800074e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000750:	f003 020c 	and.w	r2, r3, #12
 8000754:	2a08      	cmp	r2, #8
 8000756:	d117      	bne.n	8000788 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000758:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800075c:	a806      	add	r0, sp, #24
 800075e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000760:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000762:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000766:	d50c      	bpl.n	8000782 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000768:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800076a:	480a      	ldr	r0, [pc, #40]	; (8000794 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800076c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000770:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000772:	aa06      	add	r2, sp, #24
 8000774:	4413      	add	r3, r2
 8000776:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800077a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800077e:	b007      	add	sp, #28
 8000780:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <HAL_RCC_GetSysClockFreq+0x74>)
 8000784:	4350      	muls	r0, r2
 8000786:	e7fa      	b.n	800077e <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000788:	4802      	ldr	r0, [pc, #8]	; (8000794 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800078a:	e7f8      	b.n	800077e <HAL_RCC_GetSysClockFreq+0x5a>
 800078c:	08000af0 	.word	0x08000af0
 8000790:	40021000 	.word	0x40021000
 8000794:	007a1200 	.word	0x007a1200
 8000798:	003d0900 	.word	0x003d0900

0800079c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800079c:	4a54      	ldr	r2, [pc, #336]	; (80008f0 <HAL_RCC_ClockConfig+0x154>)
{
 800079e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80007a2:	6813      	ldr	r3, [r2, #0]
{
 80007a4:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80007a6:	f003 0307 	and.w	r3, r3, #7
 80007aa:	428b      	cmp	r3, r1
{
 80007ac:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80007ae:	d32a      	bcc.n	8000806 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80007b0:	6829      	ldr	r1, [r5, #0]
 80007b2:	078c      	lsls	r4, r1, #30
 80007b4:	d434      	bmi.n	8000820 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80007b6:	07ca      	lsls	r2, r1, #31
 80007b8:	d447      	bmi.n	800084a <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80007ba:	4a4d      	ldr	r2, [pc, #308]	; (80008f0 <HAL_RCC_ClockConfig+0x154>)
 80007bc:	6813      	ldr	r3, [r2, #0]
 80007be:	f003 0307 	and.w	r3, r3, #7
 80007c2:	429e      	cmp	r6, r3
 80007c4:	f0c0 8082 	bcc.w	80008cc <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80007c8:	682a      	ldr	r2, [r5, #0]
 80007ca:	4c4a      	ldr	r4, [pc, #296]	; (80008f4 <HAL_RCC_ClockConfig+0x158>)
 80007cc:	f012 0f04 	tst.w	r2, #4
 80007d0:	f040 8087 	bne.w	80008e2 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80007d4:	0713      	lsls	r3, r2, #28
 80007d6:	d506      	bpl.n	80007e6 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80007d8:	6863      	ldr	r3, [r4, #4]
 80007da:	692a      	ldr	r2, [r5, #16]
 80007dc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80007e0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80007e4:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80007e6:	f7ff ff9d 	bl	8000724 <HAL_RCC_GetSysClockFreq>
 80007ea:	6863      	ldr	r3, [r4, #4]
 80007ec:	4a42      	ldr	r2, [pc, #264]	; (80008f8 <HAL_RCC_ClockConfig+0x15c>)
 80007ee:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80007f2:	5cd3      	ldrb	r3, [r2, r3]
 80007f4:	40d8      	lsrs	r0, r3
 80007f6:	4b41      	ldr	r3, [pc, #260]	; (80008fc <HAL_RCC_ClockConfig+0x160>)
 80007f8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80007fa:	2000      	movs	r0, #0
 80007fc:	f7ff fd62 	bl	80002c4 <HAL_InitTick>
  return HAL_OK;
 8000800:	2000      	movs	r0, #0
}
 8000802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000806:	6813      	ldr	r3, [r2, #0]
 8000808:	f023 0307 	bic.w	r3, r3, #7
 800080c:	430b      	orrs	r3, r1
 800080e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000810:	6813      	ldr	r3, [r2, #0]
 8000812:	f003 0307 	and.w	r3, r3, #7
 8000816:	4299      	cmp	r1, r3
 8000818:	d0ca      	beq.n	80007b0 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800081a:	2001      	movs	r0, #1
 800081c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000820:	4b34      	ldr	r3, [pc, #208]	; (80008f4 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000822:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000826:	bf1e      	ittt	ne
 8000828:	685a      	ldrne	r2, [r3, #4]
 800082a:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800082e:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000830:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000832:	bf42      	ittt	mi
 8000834:	685a      	ldrmi	r2, [r3, #4]
 8000836:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800083a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800083c:	685a      	ldr	r2, [r3, #4]
 800083e:	68a8      	ldr	r0, [r5, #8]
 8000840:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000844:	4302      	orrs	r2, r0
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	e7b5      	b.n	80007b6 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800084a:	686a      	ldr	r2, [r5, #4]
 800084c:	4c29      	ldr	r4, [pc, #164]	; (80008f4 <HAL_RCC_ClockConfig+0x158>)
 800084e:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000850:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000852:	d11c      	bne.n	800088e <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000854:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000858:	d0df      	beq.n	800081a <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800085a:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800085c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000860:	f023 0303 	bic.w	r3, r3, #3
 8000864:	4313      	orrs	r3, r2
 8000866:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000868:	f7ff fd6e 	bl	8000348 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800086c:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 800086e:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000870:	2b01      	cmp	r3, #1
 8000872:	d114      	bne.n	800089e <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000874:	6863      	ldr	r3, [r4, #4]
 8000876:	f003 030c 	and.w	r3, r3, #12
 800087a:	2b04      	cmp	r3, #4
 800087c:	d09d      	beq.n	80007ba <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800087e:	f7ff fd63 	bl	8000348 <HAL_GetTick>
 8000882:	1bc0      	subs	r0, r0, r7
 8000884:	4540      	cmp	r0, r8
 8000886:	d9f5      	bls.n	8000874 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8000888:	2003      	movs	r0, #3
 800088a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800088e:	2a02      	cmp	r2, #2
 8000890:	d102      	bne.n	8000898 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000892:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000896:	e7df      	b.n	8000858 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000898:	f013 0f02 	tst.w	r3, #2
 800089c:	e7dc      	b.n	8000858 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800089e:	2b02      	cmp	r3, #2
 80008a0:	d10f      	bne.n	80008c2 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80008a2:	6863      	ldr	r3, [r4, #4]
 80008a4:	f003 030c 	and.w	r3, r3, #12
 80008a8:	2b08      	cmp	r3, #8
 80008aa:	d086      	beq.n	80007ba <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008ac:	f7ff fd4c 	bl	8000348 <HAL_GetTick>
 80008b0:	1bc0      	subs	r0, r0, r7
 80008b2:	4540      	cmp	r0, r8
 80008b4:	d9f5      	bls.n	80008a2 <HAL_RCC_ClockConfig+0x106>
 80008b6:	e7e7      	b.n	8000888 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008b8:	f7ff fd46 	bl	8000348 <HAL_GetTick>
 80008bc:	1bc0      	subs	r0, r0, r7
 80008be:	4540      	cmp	r0, r8
 80008c0:	d8e2      	bhi.n	8000888 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80008c2:	6863      	ldr	r3, [r4, #4]
 80008c4:	f013 0f0c 	tst.w	r3, #12
 80008c8:	d1f6      	bne.n	80008b8 <HAL_RCC_ClockConfig+0x11c>
 80008ca:	e776      	b.n	80007ba <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80008cc:	6813      	ldr	r3, [r2, #0]
 80008ce:	f023 0307 	bic.w	r3, r3, #7
 80008d2:	4333      	orrs	r3, r6
 80008d4:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80008d6:	6813      	ldr	r3, [r2, #0]
 80008d8:	f003 0307 	and.w	r3, r3, #7
 80008dc:	429e      	cmp	r6, r3
 80008de:	d19c      	bne.n	800081a <HAL_RCC_ClockConfig+0x7e>
 80008e0:	e772      	b.n	80007c8 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80008e2:	6863      	ldr	r3, [r4, #4]
 80008e4:	68e9      	ldr	r1, [r5, #12]
 80008e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80008ea:	430b      	orrs	r3, r1
 80008ec:	6063      	str	r3, [r4, #4]
 80008ee:	e771      	b.n	80007d4 <HAL_RCC_ClockConfig+0x38>
 80008f0:	40022000 	.word	0x40022000
 80008f4:	40021000 	.word	0x40021000
 80008f8:	08000b08 	.word	0x08000b08
 80008fc:	20000008 	.word	0x20000008

08000900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000900:	b510      	push	{r4, lr}
 8000902:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000904:	2228      	movs	r2, #40	; 0x28
 8000906:	2100      	movs	r1, #0
 8000908:	a806      	add	r0, sp, #24
 800090a:	f000 f8dd 	bl	8000ac8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800090e:	2100      	movs	r1, #0
 8000910:	2214      	movs	r2, #20
 8000912:	a801      	add	r0, sp, #4
 8000914:	f000 f8d8 	bl	8000ac8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000918:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800091c:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091e:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000920:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000922:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000924:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000928:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800092a:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800092c:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800092e:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000930:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000932:	f7ff fd6b 	bl	800040c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000936:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000938:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093e:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000940:	4621      	mov	r1, r4
 8000942:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000944:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000946:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000948:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800094a:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800094c:	f7ff ff26 	bl	800079c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000950:	b010      	add	sp, #64	; 0x40
 8000952:	bd10      	pop	{r4, pc}

08000954 <main>:
{
 8000954:	b507      	push	{r0, r1, r2, lr}
  HAL_Init();
 8000956:	f7ff fcd9 	bl	800030c <HAL_Init>
  SystemClock_Config();
 800095a:	f7ff ffd1 	bl	8000900 <SystemClock_Config>
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <main+0x38>)
 8000960:	699a      	ldr	r2, [r3, #24]
 8000962:	f042 0220 	orr.w	r2, r2, #32
 8000966:	619a      	str	r2, [r3, #24]
 8000968:	699a      	ldr	r2, [r3, #24]
 800096a:	f002 0220 	and.w	r2, r2, #32
 800096e:	9200      	str	r2, [sp, #0]
 8000970:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	699a      	ldr	r2, [r3, #24]
 8000974:	f042 0204 	orr.w	r2, r2, #4
 8000978:	619a      	str	r2, [r3, #24]
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f003 0304 	and.w	r3, r3, #4
 8000980:	9301      	str	r3, [sp, #4]
 8000982:	9b01      	ldr	r3, [sp, #4]
  app_run();
 8000984:	f7ff fbe2 	bl	800014c <app_run>
 8000988:	e7fe      	b.n	8000988 <main+0x34>
 800098a:	bf00      	nop
 800098c:	40021000 	.word	0x40021000

08000990 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000990:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <HAL_MspInit+0x3c>)
{
 8000992:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000994:	699a      	ldr	r2, [r3, #24]
 8000996:	f042 0201 	orr.w	r2, r2, #1
 800099a:	619a      	str	r2, [r3, #24]
 800099c:	699a      	ldr	r2, [r3, #24]
 800099e:	f002 0201 	and.w	r2, r2, #1
 80009a2:	9200      	str	r2, [sp, #0]
 80009a4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	69da      	ldr	r2, [r3, #28]
 80009a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009ac:	61da      	str	r2, [r3, #28]
 80009ae:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009b0:	4a07      	ldr	r2, [pc, #28]	; (80009d0 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b6:	9301      	str	r3, [sp, #4]
 80009b8:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009ba:	6853      	ldr	r3, [r2, #4]
 80009bc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c6:	b002      	add	sp, #8
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40010000 	.word	0x40010000

080009d4 <NMI_Handler>:
 80009d4:	4770      	bx	lr

080009d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d6:	e7fe      	b.n	80009d6 <HardFault_Handler>

080009d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d8:	e7fe      	b.n	80009d8 <MemManage_Handler>

080009da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009da:	e7fe      	b.n	80009da <BusFault_Handler>

080009dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009dc:	e7fe      	b.n	80009dc <UsageFault_Handler>

080009de <SVC_Handler>:
 80009de:	4770      	bx	lr

080009e0 <DebugMon_Handler>:
 80009e0:	4770      	bx	lr

080009e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e2:	4770      	bx	lr

080009e4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e4:	f7ff bca4 	b.w	8000330 <HAL_IncTick>

080009e8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <SystemInit+0x40>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	f042 0201 	orr.w	r2, r2, #1
 80009f0:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80009f2:	6859      	ldr	r1, [r3, #4]
 80009f4:	4a0d      	ldr	r2, [pc, #52]	; (8000a2c <SystemInit+0x44>)
 80009f6:	400a      	ands	r2, r1
 80009f8:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000a00:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000a04:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000a0c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000a0e:	685a      	ldr	r2, [r3, #4]
 8000a10:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000a14:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000a16:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000a1a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000a1c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <SystemInit+0x48>)
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	f8ff0000 	.word	0xf8ff0000
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a34:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a36:	e003      	b.n	8000a40 <LoopCopyDataInit>

08000a38 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a38:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000a3a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a3c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a3e:	3104      	adds	r1, #4

08000a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a40:	480a      	ldr	r0, [pc, #40]	; (8000a6c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000a44:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a46:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a48:	d3f6      	bcc.n	8000a38 <CopyDataInit>
  ldr r2, =_sbss
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000a4c:	e002      	b.n	8000a54 <LoopFillZerobss>

08000a4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000a50:	f842 3b04 	str.w	r3, [r2], #4

08000a54 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000a56:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a58:	d3f9      	bcc.n	8000a4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a5a:	f7ff ffc5 	bl	80009e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a5e:	f000 f80f 	bl	8000a80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a62:	f7ff ff77 	bl	8000954 <main>
  bx lr
 8000a66:	4770      	bx	lr
  ldr r3, =_sidata
 8000a68:	08000b20 	.word	0x08000b20
  ldr r0, =_sdata
 8000a6c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a70:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000a74:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000a78:	20000238 	.word	0x20000238

08000a7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a7c:	e7fe      	b.n	8000a7c <ADC1_2_IRQHandler>
	...

08000a80 <__libc_init_array>:
 8000a80:	b570      	push	{r4, r5, r6, lr}
 8000a82:	2500      	movs	r5, #0
 8000a84:	4e0c      	ldr	r6, [pc, #48]	; (8000ab8 <__libc_init_array+0x38>)
 8000a86:	4c0d      	ldr	r4, [pc, #52]	; (8000abc <__libc_init_array+0x3c>)
 8000a88:	1ba4      	subs	r4, r4, r6
 8000a8a:	10a4      	asrs	r4, r4, #2
 8000a8c:	42a5      	cmp	r5, r4
 8000a8e:	d109      	bne.n	8000aa4 <__libc_init_array+0x24>
 8000a90:	f000 f822 	bl	8000ad8 <_init>
 8000a94:	2500      	movs	r5, #0
 8000a96:	4e0a      	ldr	r6, [pc, #40]	; (8000ac0 <__libc_init_array+0x40>)
 8000a98:	4c0a      	ldr	r4, [pc, #40]	; (8000ac4 <__libc_init_array+0x44>)
 8000a9a:	1ba4      	subs	r4, r4, r6
 8000a9c:	10a4      	asrs	r4, r4, #2
 8000a9e:	42a5      	cmp	r5, r4
 8000aa0:	d105      	bne.n	8000aae <__libc_init_array+0x2e>
 8000aa2:	bd70      	pop	{r4, r5, r6, pc}
 8000aa4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000aa8:	4798      	blx	r3
 8000aaa:	3501      	adds	r5, #1
 8000aac:	e7ee      	b.n	8000a8c <__libc_init_array+0xc>
 8000aae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ab2:	4798      	blx	r3
 8000ab4:	3501      	adds	r5, #1
 8000ab6:	e7f2      	b.n	8000a9e <__libc_init_array+0x1e>
 8000ab8:	08000b18 	.word	0x08000b18
 8000abc:	08000b18 	.word	0x08000b18
 8000ac0:	08000b18 	.word	0x08000b18
 8000ac4:	08000b1c 	.word	0x08000b1c

08000ac8 <memset>:
 8000ac8:	4603      	mov	r3, r0
 8000aca:	4402      	add	r2, r0
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d100      	bne.n	8000ad2 <memset+0xa>
 8000ad0:	4770      	bx	lr
 8000ad2:	f803 1b01 	strb.w	r1, [r3], #1
 8000ad6:	e7f9      	b.n	8000acc <memset+0x4>

08000ad8 <_init>:
 8000ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ada:	bf00      	nop
 8000adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ade:	bc08      	pop	{r3}
 8000ae0:	469e      	mov	lr, r3
 8000ae2:	4770      	bx	lr

08000ae4 <_fini>:
 8000ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ae6:	bf00      	nop
 8000ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aea:	bc08      	pop	{r3}
 8000aec:	469e      	mov	lr, r3
 8000aee:	4770      	bx	lr
